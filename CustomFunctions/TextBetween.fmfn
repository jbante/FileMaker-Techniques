/*******************************************************************************
 * TextBetween ( text ; startPattern ; endPattern ; startPosition ; occurrence )
 * Returns the subset of text between startPattern and endPattern. If
 * startPattern is empty, all text between startPosition and the endPattern will
 * be returned. If endPattern is empty, all text after the specified
 * startPattern will be returned.
 *
 * @param {text} text - The text to extract from
 * @param {text} startPattern - The start pattern to search for. The start
 * pattern will not be included in the result.
 * @param {text} endPattern - The end pattern to search for. The end pattern
 * will not be included in the result.
 * @param {number} startPosition - The number of characters from the start of
 * text at which to begin the search.
 * @param {number} occurrence - A number representing which instance of the
 * startPattern you want to find.
 *
 * @return {text} Contents of text between the startPattern and endPattern
 *
 * @history 2014-10-10 - Jeremy Bante - Created
 * @history 2015-03-25 - Jeremy Bante - Handling empty startPattern and
 * endPattern parameters.
 * @history 2016-08-03 - Jeremy Bante - Fixing a bug that was truncating
 * characters when parsing an empty end pattern.
 ******************************************************************************/

Let ( [
	_startPatternIsEmpty = IsEmpty ( startPattern ) ;
	_start =
		If ( _startPatternIsEmpty ;
			startPosition ;
		/* Else */
			Position ( text ; startPattern ; startPosition ; occurrence )
		) ;
	_endOfStart = _start + Length ( startPattern ) ;
	_end =
		Case (
			IsEmpty ( endPattern ) ;
				Length ( text ) + 1 ;

			_startPatternIsEmpty ;
				Position ( text ; endPattern ; 1 ; occurrence ) ;

			/* Else */
				Position ( text ; endPattern ; _endOfStart ; 1 )
		)
] ;
	If ( _start = 0 or _end = 0 ;
		"" ;
		/* Else */ Middle ( text ; _endOfStart ; _end - _endOfStart )
	)
)